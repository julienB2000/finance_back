# Budget Tracker API

![Node.js](https://img.shields.io/badge/Node.js-339933?style=for-the-badge&logo=nodedotjs&logoColor=white) ![TypeScript](https://img.shields.io/badge/TypeScript-007ACC?style=for-the-badge&logo=typescript&logoColor=white) ![Express.js](https://img.shields.io/badge/Express.js-404D59?style=for-the-badge&logo=express&logoColor=white) ![PostgreSQL](https://img.shields.io/badge/PostgreSQL-316192?style=for-the-badge&logo=postgresql&logoColor=white) ![Drizzle ORM](https://img.shields.io/badge/Drizzle_ORM-C5F74F?style=for-the-badge) ![Docker](https://img.shields.io/badge/Docker-2496ED?style=for-the-badge&logo=docker&logoColor=white)

API RESTful s√©curis√©e et performante pour la gestion de finances personnelles, construite avec Express.js, TypeScript et Drizzle ORM. Ce projet a √©t√© d√©velopp√© dans le but de ma√Ætriser l'architecture backend "from scratch", la mod√©lisation de donn√©es normalis√©e et l'√©criture de requ√™tes SQL complexes.

---

## ‚ú® Fonctionnalit√©s

- **Authentification s√©curis√©e** par JWT (connexion, inscription, routes prot√©g√©es).
- **Gestion multi-comptes** (comptes courants, √©pargne...).
- **Cat√©gorisation personnalisable** des transactions.
- **CRUD complet** pour les transactions (d√©penses et revenus).
- **Endpoints d'analyse** pour g√©n√©rer des rapports agr√©g√©s (sommes, moyennes, regroupements).
- **Validation des donn√©es entrantes** avec Zod pour une API robuste.

---

## üõ†Ô∏è Stack Technique

- **Langage :** TypeScript
- **Framework :** Node.js, Express.js
- **Base de Donn√©es :** PostgreSQL
- **ORM / Query Builder :** Drizzle ORM
- **Validation :** Zod
- **Authentification :** JWT (jsonwebtoken), bcryptjs
- **Conteneurisation :** Docker (avec Docker Compose pour le d√©veloppement)
- **Outils :** Nodemon, ts-node

---

## üöÄ D√©marrage Rapide (Getting Started)

### Pr√©requis

- Node.js (v18 ou sup√©rieur)
- NPM ou Yarn
- Docker et Docker Compose

### Installation

1.  **Clonez le d√©p√¥t :**

    ```bash
    git clone [https://github.com/votre-nom/budget-tracker-api.git](https://github.com/votre-nom/budget-tracker-api.git)
    cd budget-tracker-api
    ```

2.  **Installez les d√©pendances :**

    ```bash
    npm install
    ```

3.  **Configurez les variables d'environnement :**
    Cr√©ez un fichier `.env` √† la racine du projet en vous basant sur le fichier `.env.example`.

    ```bash
    cp .env.example .env
    ```

    Modifiez le fichier `.env` avec vos propres informations (cl√© secr√®te JWT, informations de la base de donn√©es).

4.  **Lancez la base de donn√©es avec Docker :**

    ```bash
    docker-compose up -d
    ```

5.  **Appliquez les migrations de la base de donn√©es :**

    ```bash
    npx drizzle-kit migrate
    ```

6.  **Lancez le serveur en mode d√©veloppement :**

    ```bash
    npm run dev
    ```

    L'API est maintenant accessible √† l'adresse `http://localhost:3000`.

---

## üîë Variables d'Environnement

Le fichier `.env` doit contenir les variables suivantes :

```env
# Configuration du serveur
PORT=3000

# Configuration de la base de donn√©es PostgreSQL
DB_HOST=localhost
DB_PORT=5432
DB_USER=votre_user
DB_PASSWORD=votre_mot_de_passe
DB_NAME=budget_db

# Configuration JWT
JWT_SECRET=votre_cle_secrete_tres_longue_et_complexe
```

POST /auth/register Cr√©e un nouvel utilisateur. Publique
POST /auth/login Connecte un utilisateur et renvoie un token JWT. Publique
GET /auth/me Renvoie les informations de l'utilisateur connect√©. Priv√©e (JWT)
